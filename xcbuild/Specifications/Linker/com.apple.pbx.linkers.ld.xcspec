/**
 Copyright (c) 2015-present, Facebook, Inc.
 All rights reserved.

 This source code is licensed under the BSD-style license found in the
 LICENSE file in the root directory of this source tree. An additional grant
 of patent rights can be found in the PATENTS file in the same directory.
 */

{
    Type = Linker;
    Identifier = com.apple.pbx.linkers.ld;
    Name = "Linker";

    CommandLine = "[exec-path] -arch $(arch) [options] [special-args] -o $(OutputPath)";
    RuleName = "Ld $(OutputPath) $(variant) $(arch)";

    SupportsInputFileList = YES;
    DependencyInfoFile = "$(LD_DEPENDENCY_INFO_FILE)";
    BinaryFormats = ( "mach-o" );
    InputFileTypes = (
        "archive.ar",
        "compiled.mach-o.dylib",
        "compiled.mach-o.objfile",
        "sourcecode.text-based-dylib-definition",
        "wrapper.framework",
    );
    Outputs = (
        "$(OutputPath)",
    );

    Options = (
        /* Input */
        {
            Name = "__INPUT_FILE_LIST_PATH__";
            Type = Path;
            DefaultValue = "$(LINK_FILE_LIST_$(variant)_$(arch))";
            CommandLineFlag = "-filelist";
            IsInputDependency = YES;
        },
        {
            Name = "LD_QUOTE_LINKER_ARGUMENTS_FOR_COMPILER_DRIVER";
            Type = Boolean;
            DefaultValue = YES;
        },


        /* Output */
        {
            Name = "MACH_O_TYPE";
            Type = Enumeration;
            /* Default from build system. */
            CommandLineArgs = {
                "mh_execute" = ( );
                "mh_bundle" = ( "-bundle" );
                "mh_dylib" = ( "-dynamiclib" );
                "mh_object" = ( "-r" );
                "staticlib" = ( ); /* Uses libtool. */
            };
        },
        {
            Name = "LD_DEPLOYMENT_TARGET";
            Type = String;
            DefaultValue = "$($(DEPLOYMENT_TARGET_SETTING_NAME))";
            CommandLinePrefixFlag = "-$(DEPLOYMENT_TARGET_CLANG_FLAG_NAME)=";
            SetValueInEnvironmentVariable = "$(DEPLOYMENT_TARGET_CLANG_ENV_NAME)";
        },
        {
            Name = "LINKER_DISPLAYS_MANGLED_NAMES";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineArgs = {
                YES = ( "-Xlinker", "--no-demangle" );
            };
        },
        {
            Name = "LD_DEPENDENCY_INFO_FILE";
            Type = Path;
            DefaultValue = "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_dependency_info.dat";
        },


        /* Search Paths */
        {
            Name = "SDKROOT";
            Type = Path;
            CommandLineFlag = "-isysroot";
            IsInputDependency = YES;
        },
        {
            Name = "LIBRARY_SEARCH_PATHS";
            Type = PathList;
            FlattenRecursiveSearchPathsInValue = YES;
            CommandLinePrefixFlag = "-L";
        },
        {
            Name = "PRODUCT_TYPE_LIBRARY_SEARCH_PATHS";
            Type = PathList;
            FlattenRecursiveSearchPathsInValue = YES;
            CommandLinePrefixFlag = "-L";
        },
        {
            Name = "FRAMEWORK_SEARCH_PATHS";
            Type = PathList;
            FlattenRecursiveSearchPathsInValue = YES;
            CommandLinePrefixFlag = "-F";
        },
        {
            Name = "PRODUCT_TYPE_FRAMEWORK_SEARCH_PATHS";
            Type = PathList;
            FlattenRecursiveSearchPathsInValue = YES;
            CommandLinePrefixFlag = "-F";
        },


        /* Libraries */
        {
            Name = "BUNDLE_LOADER";
            Type = Path;
            DefaultValue = "";
            CommandLineFlag = "-bundle_loader";
        },
        {
            Name = "LINK_WITH_STANDARD_LIBRARIES";
            Type = Boolean;
            DefaultValue = YES;
            CommandLineFlagIfFalse = "-nostdlib";
        },
        {
            Name = "REEXPORTED_FRAMEWORK_NAMES";
            Type = StringList;
            /* Default from build system. */
            CommandLineArgs = (
                "-Xlinker", "-reexport_framework",
                "-Xlinker", "$(value)",
            );
        },
        {
            Name = "REEXPORTED_LIBRARY_NAMES";
            Type = StringList;
            /* Default from build system. */
            CommandLineArgs = (
                "-Xlinker", "-reexport-l$(value)",
            );
        },
        {
            Name = "REEXPORTED_LIBRARY_PATHS";
            Type = PathList;
            /* Default from build system. */
            CommandLineArgs = (
                "-Xlinker", "-reexport_library",
                "-Xlinker", "$(value)",
            );
        },


        /* Runtime Search Paths */
        {
            Name = "LD_DYLIB_INSTALL_NAME";
            Type = Path;
            DefaultValue = "";
            Condition = "$(MACH_O_TYPE) == 'mh_dylib'";
            CommandLineFlag = "-install_name";
        },
        {
            Name = "LD_RUNPATH_SEARCH_PATHS";
            Type = PathList;
            DefaultValue = "";
            CommandLineArgs = (
                "-Xlinker", "-rpath",
                "-Xlinker", "$(value)",
            );
        },


        /* Symbol Map */
        {
            Name = "LD_GENERATE_MAP_FILE";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineArgs = {
                YES = (
                    "-Xlinker", "-map",
                    "-Xlinker", "$(LD_MAP_FILE_PATH)",
                );
            };
        },
        {
            Name = "LD_MAP_FILE_PATH";
            Type = Path;
            DefaultValue = "$(TARGET_TEMP_DIR)/$(PRODUCT_NAME)-LinkMap-$(CURRENT_VARIANT)-$(CURRENT_ARCH).txt";
        },


        /* Output Options */
        {
            Name = "DEAD_CODE_STRIPPING";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineFlag = "-dead_strip";
        },
        {
            Name = "GENERATE_PROFILING_CODE";
            Type = Boolean;
            Condition = "$(variant) == 'profile'";
            /* Default from build system. */
            CommandLineFlag = "-pg";
        },
        {
            Name = "INIT_ROUTINE";
            Type = String;
            /* Default from build system. */
            CommandLineFlag = "-init";
        },
        {
            Name = "KEEP_PRIVATE_EXTERNS";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineFlag = "-keep_private_externs";
        },
        {
            Name = "LD_DONT_RUN_DEDUPLICATION";
            Type = Boolean;
            DefaultValue = YES;
            Condition = "$(GCC_OPTIMIZATION_LEVEL) == '0'";
            CommandLineArgs = {
                YES = ( "-Xlinker", "-no_deduplicate" );
            };
        },
        {
            Name = "LD_LTO_OBJECT_FILE";
            Type = Path;
            DefaultValue = "$(OBJECT_FILE_DIR_$(CURRENT_VARIANT))/$(CURRENT_ARCH)/$(PRODUCT_NAME)_lto.o";
            Condition = "$(GCC_GENERATE_DEBUGGING_SYMBOLS) == YES";
            CommandLineArgs = (
                "-Xlinker",
                "-object_path_lto",
                "-Xlinker",
                "$(value)",
            );
        },
        {
            Name = "LD_NO_PIE";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineFlag = "-no_pie";
        },
        {
            Name = "LD_OBJC_ABI_VERSION";
            Type = Enumeration;
            DefaultValue = "$(OBJC_ABI_VERSION)";
            CommandLineArgs = {
                "" = ( );
                "<<otherwise>>" = (
                    "-Xlinker", "-objc_abi_version",
                    "-Xlinker", "$(value)",
                );
            };
        },
        {
            Name = "LD_THREAD_SANITIZER";
            Type = Boolean;
            DefaultValue = "$(ENABLE_THREAD_SANITIZER)";
            CommandLineFlag = "-fsanitize=thread";
            Architectures = (
                "x86_64",
            );
        },
        {
            Name = "ORDER_FILE";
            Type = Path;
            DefaultValue = "";
            CommandLineArgs = {
                "" = ( );
                "<<otherwise>>" = (
                    "-Xlinker", "-order_file",
                    "-Xlinker", "$(value)",
                );
            };
        },
        {
            Name = "PRESERVE_DEAD_CODE_INITS_AND_TERMS";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineFlag = "-no_dead_strip_inits_and_terms";
        },


        /* Exports */
        {
            Name = "EXPORTED_SYMBOLS_FILE";
            Type = Path;
            /* Default from build system. */
            Condition = "$(SEPARATE_SYMBOL_EDIT) == NO";
            CommandLineFlag = "-exported_symbols_list";
            IsInputDependency  = YES;
        },
        {
            Name = "LD_EXPORT_GLOBAL_SYMBOLS";
            Type = Boolean;
            DefaultValue = NO;
            CommandLineArgs = {
                YES = ( "-Xlinker", "-export_dynamic" );
            };
        },
        {
            Name = "UNEXPORTED_SYMBOLS_FILE";
            Type = Path;
            /* Default from build system. */
            Condition = "$(SEPARATE_SYMBOL_EDIT) == NO";
            CommandLineFlag = "-unexported_symbols_list";
            IsInputDependency = YES;
        },


        /* Bitcode */
        {
            Name = "LD_BITCODE_GENERATION_MODE";
            Type = Enumeration;
            DefaultValue = "$(BITCODE_GENERATION_MODE)";
            Condition = "$(ENABLE_BITCODE) == YES";
            CommandLineArgs = {
                "marker" = ( "-fembed-bitcode-marker" );
                "bitcode" = ( "-fembed-bitcode" );
            };
            Architectures = (
                "armv7",
                "armv7s",
                "armv7k",
                "armhf",
                "armeabi",
                "arm64",
            );
        },
        {
            Name = "LD_GENERATE_BITCODE_SYMBOL_MAP";
            Type = Boolean;
            DefaultValue = "$(HIDE_BITCODE_SYMBOLS)";
            Condition = "$(ENABLE_BITCODE) == YES && $(BITCODE_GENERATION_MODE) == 'bitcode' && $(MACH_O_TYPE) != 'mh_object'";
            CommandLineArgs = {
                YES = (
                    "-Xlinker", "-bitcode_symbol_map",
                    "-Xlinker", "$(BUILT_PRODUCTS_DIR)",
                );
            };
            Architectures = (
                "armv7",
                "armv7s",
                "armv7k",
                "armhf",
                "armeabi",
                "arm64",
            );
        },
        {
            Name = "LD_HIDE_BITCODE_SYMBOLS";
            Type = Boolean;
            DefaultValue = "$(HIDE_BITCODE_SYMBOLS)";
            Condition = "$(ENABLE_BITCODE) == YES && $(BITCODE_GENERATION_MODE) == 'bitcode'";
            CommandLineArgs = {
                YES = ( "-Xlinker", "-hide_bitcode_symbols" );
            };
            Architectures = (
                "armv7",
                "armv7s",
                "armv7k",
                "armhf",
                "armeabi",
                "arm64",
            );
        },
        {
            Name = "LD_VERIFY_BITCODE";
            Type = Boolean;
            DefaultValue = YES;
            Condition = "$(ENABLE_BITCODE) == YES && $(BITCODE_GENERATION_MODE) == 'bitcode'";
            CommandLineArgs = {
                YES = ( "-Xlinker", "-verify_bitcode" );
            };
            Architectures = (
                "armv7",
                "armv7s",
                "armv7k",
                "armhf",
                "armeabi",
                "arm64",
            );
        },


        /* Migration */
        {
            Name = "CLANG_ARC_MIGRATE_DIR";
            Type = Path;
            CommandLineFlag = "-ccc-arcmt-migrate";
        },
        {
            Name = "CLANG_ARC_MIGRATE_PRECHECK";
            Type = Enumeration;
            Values = (
                "donothing",
                "precheck",
            );
            DefaultValue = "donothing";
            CommandLineArgs = {
                "donothing" = ( );
                "precheck" = ( "-ccc-arcmt-check" );
            };
        },


        /* Custom Flags */
        {
            Name = "LD_FLAGS";
            Type = StringList;
            /* Default from build system. */
            /* See ALL_OTHER_LDFLAGS. */
        },
        {
            Name = "OTHER_LDFLAGS";
            Type = StringList;
            /* Default from build system. */
            /* See ALL_OTHER_LDFLAGS. */
        },
        {
            Name = "SECTORDER_FLAGS";
            Type = StringList;
            /* Default from build system. */
            /* See ALL_OTHER_LDFLAGS. */
        },
        {
            Name = "WARNING_LDFLAGS";
            Type = StringList;
            /* Default from build system. */
            /* See ALL_OTHER_LDFLAGS. */
        },
        {
            Name = "ALL_OTHER_LDFLAGS";
            Type = StringList;
            DefaultValue = "$(LD_FLAGS) $(SECTORDER_FLAGS) $(OTHER_LDFLAGS) $(OTHER_LDFLAGS_$(variant)) $(OTHER_LDFLAGS_$(arch)) $(OTHER_LDFLAGS_$(variant)_$(arch)) $(PRODUCT_SPECIFIC_LDFLAGS)";
            CommandLinePrefixFlag = "";
        },
        {
            Name = "AdditionalCommandLineArguments";
            Type = StringList;
            CommandLinePrefixFlag = "";
        },
    );
}
